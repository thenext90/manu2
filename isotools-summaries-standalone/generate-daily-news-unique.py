#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script MEJORADO para generar JSON diario de 3 art√≠culos aleatorios
SOLO selecciona art√≠culos con res√∫menes √∫nicos de IA
Evita res√∫menes gen√©ricos duplicados
"""

import json
import random
import os
from datetime import datetime, timedelta
from collections import Counter

def generate_daily_news():
    print("üóûÔ∏è GENERADOR DE NOTICIAS DIARIAS ISO (3 art√≠culos √öNICOS)")
    print("=" * 55)
    
    # Leer archivo principal
    try:
        with open('isotools-final-data.json', 'r', encoding='utf-8') as f:
            main_data = json.load(f)
        print(f"‚úÖ Cargados {len(main_data['data'])} art√≠culos")
    except FileNotFoundError:
        print("‚ùå No se encontr√≥ isotools-final-data.json")
        return
    
    all_articles = main_data['data']
    
    # Identificar el resumen gen√©rico m√°s com√∫n
    summaries = [article.get('ai_summary', '') for article in all_articles]
    summary_counts = Counter(summaries)
    most_common_summary = summary_counts.most_common(1)[0]
    generic_summary = most_common_summary[0]
    generic_count = most_common_summary[1]
    
    print(f"üîç Detectado resumen gen√©rico usado en {generic_count} art√≠culos")
    print(f"üìù Resumen gen√©rico: '{generic_summary[:80]}...'")
    
    # Filtrar art√≠culos con res√∫menes √∫nicos
    unique_articles = []
    generic_articles = []
    
    for article in all_articles:
        if article.get('ai_summary', '') == generic_summary:
            generic_articles.append(article)
        else:
            unique_articles.append(article)
    
    print(f"‚úÖ Encontrados {len(unique_articles)} art√≠culos con res√∫menes √∫nicos")
    print(f"‚ö†Ô∏è  Encontrados {len(generic_articles)} art√≠culos con res√∫menes gen√©ricos")
    
    # Seleccionar 3 art√≠culos priorizando √∫nicos
    selected_articles = []
    
    if len(unique_articles) >= 3:
        # Suficientes art√≠culos √∫nicos
        selected_articles = random.sample(unique_articles, 3)
        print("üéØ Seleccionados 3 art√≠culos con res√∫menes √∫nicos")
    elif len(unique_articles) > 0:
        # Algunos √∫nicos, completar con gen√©ricos pero diferentes t√≠tulos
        selected_articles = unique_articles.copy()
        remaining_needed = 3 - len(unique_articles)
        
        # Seleccionar los mejores gen√©ricos (diferentes categor√≠as si es posible)
        available_generic = random.sample(generic_articles, min(remaining_needed, len(generic_articles)))
        selected_articles.extend(available_generic)
        
        print(f"üîÑ Seleccionados {len(unique_articles)} √∫nicos + {len(available_generic)} gen√©ricos")
    else:
        # Solo gen√©ricos disponibles - seleccionar los mejores
        selected_articles = random.sample(generic_articles, 3)
        print("‚ö†Ô∏è  Solo art√≠culos gen√©ricos disponibles")
    
    # Mezclar para orden aleatorio
    random.shuffle(selected_articles)
    
    # Agregar informaci√≥n de rotaci√≥n
    for i, article in enumerate(selected_articles):
        article['news_priority'] = i + 1
        article['selected_date'] = datetime.now().isoformat()
        article['rotation_id'] = f"{datetime.now().strftime('%Y-%m-%d')}-{i+1}"
        
        # Marcar si es resumen √∫nico o gen√©rico
        article['summary_type'] = 'unique' if article.get('ai_summary', '') != generic_summary else 'generic'
    
    # Crear JSON de noticias diarias
    today = datetime.now()
    tomorrow = today + timedelta(days=1)
    
    # Contar tipos de resumen seleccionados
    unique_selected = sum(1 for art in selected_articles if art.get('summary_type') == 'unique')
    generic_selected = sum(1 for art in selected_articles if art.get('summary_type') == 'generic')
    
    daily_news = {
        "metadata": {
            "title": "ISOTools - Noticias Diarias",
            "description": "Selecci√≥n diaria de 3 art√≠culos destacados sobre normas ISO",
            "source": "ISOTools Corporate Blog (isotools.us)",
            "generated_date": today.strftime("%Y-%m-%d"),
            "generated_at": today.isoformat(),
            "next_update": tomorrow.strftime("%Y-%m-%d"),
            "total_articles": 3,
            "rotation_type": "daily_random_selection_unique_summaries",
            "version": "2.0.0",
            "purpose": "Noticias diarias para secci√≥n web",
            "github_raw_example": "https://raw.githubusercontent.com/thenext90/manu2/isotools-news-only/isotools-daily-news.json",
            "parent_source": main_data['metadata']['source'],
            "language": "espa√±ol",
            "summary_quality": {
                "unique_summaries": unique_selected,
                "generic_summaries": generic_selected,
                "total_available_unique": len(unique_articles)
            }
        },
        "configuration": {
            "daily_rotation": True,
            "articles_per_day": 3,
            "selection_method": "prioritize_unique_summaries",
            "auto_update": True,
            "github_action_enabled": True,
            "cache_duration_hours": 24,
            "rotation_on_each_execution": True,
            "quality_filter_enabled": True,
            "avoid_generic_summaries": True
        },
        "daily_news": selected_articles,
        "generation_info": {
            "selected_at": today.isoformat(),
            "next_rotation": tomorrow.isoformat(),
            "algorithm": "python_unique_summary_priority",
            "total_available_articles": len(all_articles),
            "unique_summaries_available": len(unique_articles),
            "generic_summaries_count": len(generic_articles),
            "rotation_guaranteed": True,
            "quality_metrics": {
                "unique_ratio": f"{unique_selected}/3",
                "generic_ratio": f"{generic_selected}/3"
            }
        }
    }
    
    # Guardar archivo en directorio actual
    with open('isotools-daily-news.json', 'w', encoding='utf-8') as f:
        json.dump(daily_news, f, indent=2, ensure_ascii=False)
    
    # Tambi√©n guardar en el directorio ra√≠z del proyecto para GitHub Actions
    root_path = os.path.join('..', 'isotools-daily-news.json')
    with open(root_path, 'w', encoding='utf-8') as f:
        json.dump(daily_news, f, indent=2, ensure_ascii=False)
    
    print(f"‚úÖ Generado isotools-daily-news.json con 3 art√≠culos")
    print(f"‚úÖ Copiado a directorio ra√≠z para GitHub Actions")
    print(f"\nüìä Calidad de res√∫menes:")
    print(f"   üéØ √önicos: {unique_selected}/3")
    print(f"   ‚ö†Ô∏è  Gen√©ricos: {generic_selected}/3")
    print("\nüìã Art√≠culos seleccionados:")
    for i, article in enumerate(selected_articles, 1):
        summary_emoji = "üéØ" if article.get('summary_type') == 'unique' else "‚ö†Ô∏è "
        print(f"{i}. {summary_emoji} {article['title'][:60]}...")
        print(f"   Categor√≠a: {article['category']}")
        print(f"   Resumen: {article.get('ai_summary', '')[:80]}...")
    
    print(f"\nüöÄ Archivo listo para consumo en GitHub!")
    print(f"üåê URL: https://raw.githubusercontent.com/thenext90/manu2/isotools-news-only/isotools-daily-news.json")

if __name__ == "__main__":
    generate_daily_news()